% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bru.inference.R
\name{summary.bru}
\alias{summary.bru}
\alias{print.summary_bru}
\title{Summary for an inlabru fit}
\usage{
\method{summary}{bru}(object, verbose = FALSE, ...)

\method{print}{summary_bru}(x, ...)
}
\arguments{
\item{object}{An object obtained from a \code{\link[=bru]{bru()}} or \code{\link[=lgcp]{lgcp()}} call}

\item{verbose}{logical; If \code{TRUE}, include more details of the
component definitions. If \code{FALSE}, only show basic component
definition information. Default: \code{FALSE}}

\item{\dots}{arguments passed on to component summary functions, see
\code{\link[=summary.component]{summary.component()}}.}

\item{x}{A \code{summary_bru} object}
}
\description{
Takes a fitted \code{bru} object produced by \code{\link[=bru]{bru()}} or \code{\link[=lgcp]{lgcp()}} and creates
various summaries from it.
}
\examples{
\donttest{
if (bru_safe_inla(quietly = TRUE)) {

  # Simulate some covariates x and observations y
  input.df <- data.frame(x = cos(1:10))
  input.df <- within(input.df, y <- 5 + 2 * x + rnorm(10, mean = 0, sd = 0.1))

  # Fit a Gaussian likelihood model
  fit <- bru(y ~ x + Intercept(1), family = "gaussian", data = input.df)

  # Obtain summary
  fit$summary.fixed
}


if (bru_safe_inla(quietly = TRUE)) {

  # Alternatively, we can use the like() function to construct the likelihood:

  lik <- like(family = "gaussian", formula = y ~ x + Intercept, data = input.df)
  fit <- bru(~ x + Intercept(1), lik)
  fit$summary.fixed
}

# An important addition to the INLA methodology is bru's ability to use
# non-linear predictors. Such a predictor can be formulated via like()'s
# \code{formula} parameter. The z(1) notation is needed to ensure that
# the z component should be interpreted as single latent variable and not
# a covariate:

if (bru_safe_inla(multicore = interactive(), quietly = TRUE)) {
  z <- 2
  input.df <- within(input.df, y <- 5 + exp(z) * x + rnorm(10, mean = 0, sd = 0.1))
  lik <- like(
    family = "gaussian", data = input.df,
    formula = y ~ exp(z) * x + Intercept
  )
  fit <- bru(~ z(1) + Intercept(1), lik)

  # Check the result (z posterior should be around 2)
  fit$summary.fixed
}
}
}
